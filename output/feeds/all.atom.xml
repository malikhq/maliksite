<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>malikblog</title><link href="https://malikblogsite.netlify.app/" rel="alternate"/><link href="https://malikblogsite.netlify.app/feeds/all.atom.xml" rel="self"/><id>https://malikblogsite.netlify.app/</id><updated>2025-08-25T00:00:00+02:00</updated><subtitle>DevOps Engineer</subtitle><entry><title>Portfolio</title><link href="https://malikblogsite.netlify.app/portfolio.html" rel="alternate"/><published>2025-08-25T00:00:00+02:00</published><updated>2025-08-25T00:00:00+02:00</updated><author><name>Malik</name></author><id>tag:malikblogsite.netlify.app,2025-08-25:/portfolio.html</id><content type="html">&lt;h1&gt;My Portfolio&lt;/h1&gt;
&lt;p&gt;Welcome to my portfolio! 🚀&lt;/p&gt;
&lt;p&gt;Here you can showcase:
- Projects
- Case studies
- GitHub repos
- Certifications&lt;/p&gt;</content><category term="misc"/></entry><entry><title>Terraform Like a Pro: 5 Game-Changing IaC Practices</title><link href="https://malikblogsite.netlify.app/terraform-like-a-pro-5-game-changing-iac-practices.html" rel="alternate"/><published>2025-08-25T00:00:00+02:00</published><updated>2025-08-25T00:00:00+02:00</updated><author><name>Malik</name></author><id>tag:malikblogsite.netlify.app,2025-08-25:/terraform-like-a-pro-5-game-changing-iac-practices.html</id><summary type="html">&lt;p&gt;Level up your Terraform workflow with five practical Infrastructure as Code (IaC) practices that improve readability, security, and maintainability.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Terraform isn’t just about “making it work.”&lt;br&gt;
It’s about making it &lt;strong&gt;readable, secure, and easy to maintain&lt;/strong&gt; so your future self (and your team) will thank you.  &lt;/p&gt;
&lt;p&gt;Here’s how to level up your Terraform game ⬇️&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;1️⃣ Format Everything – &lt;code&gt;terraform fmt&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Keep code consistent across the team  &lt;/li&gt;
&lt;li&gt;✅ Avoid “looks different on my machine” problems  &lt;/li&gt;
&lt;li&gt;📎 &lt;a href="https://developer.hashicorp.com/terraform/cli/commands/fmt"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;2️⃣ Validate Before You Deploy – &lt;code&gt;terraform validate&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Catch errors early  &lt;/li&gt;
&lt;li&gt;✅ Avoid shipping broken infra to prod  &lt;/li&gt;
&lt;li&gt;📎 &lt;a href="https://developer.hashicorp.com/terraform/cli/commands/validate"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;3️⃣ Lint for Best Practices – &lt;code&gt;tflint&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Spot typos &amp;amp; deprecated arguments  &lt;/li&gt;
&lt;li&gt;✅ Fix issues before they bite you  &lt;/li&gt;
&lt;li&gt;📎 &lt;a href="https://github.com/terraform-linters/tflint"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;4️⃣ Scan for Security – &lt;strong&gt;Checkov&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Find risky configs (public S3, open SGs)  &lt;/li&gt;
&lt;li&gt;✅ Stay compliant (CIS, PCI, HIPAA)  &lt;/li&gt;
&lt;li&gt;📎 &lt;a href="https://www.checkov.io/"&gt;Checkov Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;5️⃣ Auto-Generate Docs – &lt;code&gt;terraform-docs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Keep README in sync with your code  &lt;/li&gt;
&lt;li&gt;✅ Save time on manual updates  &lt;/li&gt;
&lt;li&gt;📎 &lt;a href="https://terraform-docs.io/"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;💡 &lt;strong&gt;Pro Tip:&lt;/strong&gt; Add these checks to your &lt;strong&gt;CI/CD pipeline&lt;/strong&gt; so they run on every PR.  &lt;/p&gt;
&lt;p&gt;Infrastructure is more than code — it’s a living system.&lt;br&gt;
Keep it clear, secure, and reliable.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;What’s your go-to Terraform best practice?&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="Blog"/><category term="Terraform"/><category term="DevOps"/><category term="Infrastructure as Code"/><category term="Cloud Engineering"/><category term="Automation"/><category term="Security"/><category term="Platform Engineering"/></entry><entry><title>Terraform Best Practices</title><link href="https://malikblogsite.netlify.app/terraform-best-practices.html" rel="alternate"/><published>2025-08-19T00:00:00+02:00</published><updated>2025-08-19T00:00:00+02:00</updated><author><name>Abdul Malik Ibikunle</name></author><id>tag:malikblogsite.netlify.app,2025-08-19:/terraform-best-practices.html</id><summary type="html">&lt;p&gt;Infrastructure as Code (IaC) with &lt;strong&gt;Terraform&lt;/strong&gt; allows DevOps teams to define, manage, and scale infrastructure in a repeatable and reliable way.&lt;br&gt;
But writing Terraform isn’t just about “making it work”—it’s about making it &lt;strong&gt;consistent, secure, and easy to maintain&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;Here are some &lt;strong&gt;best practices&lt;/strong&gt; that will help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Infrastructure as Code (IaC) with &lt;strong&gt;Terraform&lt;/strong&gt; allows DevOps teams to define, manage, and scale infrastructure in a repeatable and reliable way.&lt;br&gt;
But writing Terraform isn’t just about “making it work”—it’s about making it &lt;strong&gt;consistent, secure, and easy to maintain&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;Here are some &lt;strong&gt;best practices&lt;/strong&gt; that will help you level up your Terraform workflow:&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;1. Use Version Control (GitOps Mindset)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Always keep Terraform code in a &lt;strong&gt;Git repository&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Follow a &lt;strong&gt;branching strategy&lt;/strong&gt; (e.g., &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, feature branches).  &lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;pull requests&lt;/strong&gt; for code reviews before merging infrastructure changes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;2. Keep Code Modular&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Break large Terraform files into &lt;strong&gt;modules&lt;/strong&gt; (e.g., VPC, EC2, RDS).  &lt;/li&gt;
&lt;li&gt;Reuse modules across environments (dev, staging, prod).  &lt;/li&gt;
&lt;li&gt;Publish reusable modules in a private registry or a Git repo.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;3. Naming Conventions &amp;amp; Tags&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use a &lt;strong&gt;consistent naming convention&lt;/strong&gt; for resources (e.g., &lt;code&gt;project-env-role&lt;/code&gt;).  &lt;/li&gt;
&lt;li&gt;Apply tags like &lt;code&gt;Owner&lt;/code&gt;, &lt;code&gt;Environment&lt;/code&gt;, and &lt;code&gt;CostCenter&lt;/code&gt; for better governance and cost tracking.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;4. Remote State Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Never store Terraform state files (&lt;code&gt;terraform.tfstate&lt;/code&gt;) locally.  &lt;/li&gt;
&lt;li&gt;Use a &lt;strong&gt;remote backend&lt;/strong&gt; (e.g., S3 + DynamoDB, GCS, or Terraform Cloud) for team collaboration.  &lt;/li&gt;
&lt;li&gt;Enable &lt;strong&gt;state locking&lt;/strong&gt; to prevent conflicts.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;5. Secrets Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t hardcode secrets in Terraform files.  &lt;/li&gt;
&lt;li&gt;Store credentials in a &lt;strong&gt;secret manager&lt;/strong&gt; (e.g., HashiCorp Vault, AWS Secrets Manager).  &lt;/li&gt;
&lt;li&gt;Use variables and reference secrets securely.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;6. Linting &amp;amp; Formatting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;terraform fmt&lt;/code&gt; to keep code formatting consistent.  &lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;terraform validate&lt;/code&gt; to catch errors early.  &lt;/li&gt;
&lt;li&gt;Integrate &lt;strong&gt;static analysis tools&lt;/strong&gt; like &lt;a href="https://www.checkov.io/"&gt;Checkov&lt;/a&gt; or &lt;code&gt;tflint&lt;/code&gt; into CI/CD pipelines.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;7. Plan Before Apply&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Always run &lt;code&gt;terraform plan&lt;/code&gt; before &lt;code&gt;terraform apply&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Review changes carefully, especially in production environments.  &lt;/li&gt;
&lt;li&gt;Consider using &lt;strong&gt;approval workflows&lt;/strong&gt; (e.g., GitHub Actions, GitLab CI, Jenkins) before applying changes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;8. Manage Environments Properly&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Separate &lt;strong&gt;state files&lt;/strong&gt; for different environments (&lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, &lt;code&gt;prod&lt;/code&gt;).  &lt;/li&gt;
&lt;li&gt;Avoid using the same state file across environments.  &lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;workspaces&lt;/strong&gt; only for truly identical environments.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;9. Documentation &amp;amp; Collaboration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Document modules with clear &lt;strong&gt;README.md&lt;/strong&gt; files.  &lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;variable descriptions&lt;/strong&gt; and examples for easy onboarding.  &lt;/li&gt;
&lt;li&gt;Share knowledge across the team to avoid “single point of failure.”  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;10. Security &amp;amp; Least Privilege&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Follow the &lt;strong&gt;principle of least privilege&lt;/strong&gt; for IAM roles.  &lt;/li&gt;
&lt;li&gt;Rotate credentials regularly.  &lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;policy-as-code&lt;/strong&gt; tools (like OPA or Sentinel) to enforce security rules.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Terraform is powerful, but with great power comes the need for discipline.&lt;br&gt;
By following these best practices—&lt;strong&gt;modular code, remote state, security-first design, and automated checks&lt;/strong&gt;—you’ll ensure your infrastructure is reliable, maintainable, and secure.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;💡 &lt;em&gt;Tip: Start small by adding linting (&lt;code&gt;terraform fmt&lt;/code&gt;, &lt;code&gt;tflint&lt;/code&gt;) and remote state, then evolve into modules, GitOps, and CI/CD workflows.&lt;/em&gt;  &lt;/p&gt;</content><category term="Blog"/></entry></feed>